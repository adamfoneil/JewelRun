@using System.Diagnostics
@for (int row = 1; row <= Height; row++)
{
	for (int col = 1; col <= Width; col++)
	{		
		Location loc = new(row, col);
		<button class="@(GetCellCssClass?.Invoke(loc))" style="@(GetCellStyle?.Invoke(loc))" @onclick="PlainHandler">
			@{ var content = new MarkupString(GetCellContent(loc) ?? string.Empty); }
			@content
		</button>
	}
}

<button @onclick="PlainHandler">hello</button>

@code {
	private Location SelectedLocation = default!;

	public enum NextClickOptions
	{
		Starting,
		Completing
	}

	private NextClickOptions NextClickBehavior = NextClickOptions.Starting;

	[Parameter]
	public int Width { get; set; }

	[Parameter]
	public int Height { get; set; }

	[Parameter]
	public Func<Location, string>? GetCellCssClass { get; set; }

	[Parameter, EditorRequired]
	public Func<Location, string?> GetCellContent { get; set; } = (location) => default;

	[Parameter]
	public Func<Location, string?> GetCellStyle { get; set; } = (location) => default!;

	[Parameter]
	public EventCallback<MoveArgs> MoveStarted { get; set; }

	[Parameter]
	public EventCallback<MoveArgs> MoveCompleted { get; set; }

	private string CellId(int column, int row) => $"square-{row}-{column}";

	private async Task CellClick(MouseEventArgs args, Location location)
	{
		MoveArgs moveArgs = new();

		if (NextClickBehavior == NextClickOptions.Starting)
		{
			moveArgs.SourceLocation = location;
			SelectedLocation = location;	
			await MoveStarted.InvokeAsync(moveArgs);
			if (moveArgs.IsValid)
			{
				NextClickBehavior = NextClickOptions.Completing;
				return;
			}			
		}

		if (NextClickBehavior == NextClickOptions.Completing)
		{
			moveArgs.SourceLocation = SelectedLocation;
			moveArgs.TargetLocation = location;
			await MoveCompleted.InvokeAsync(moveArgs);
			if (moveArgs.IsValid)
			{
				NextClickBehavior = NextClickOptions.Starting;
			}			
		}

		StateHasChanged();
	}

	private async Task PlainHandler(MouseEventArgs args)
	{
		await Task.CompletedTask;
		Debugger.Break();
	}	
}

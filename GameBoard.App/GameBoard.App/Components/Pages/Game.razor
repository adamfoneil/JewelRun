@page "/Game"
<style>
	main {		
		display:flex;
		justify-content:center;
		align-items:center
	}

	.mainGrid {
		display:grid;
		@(CurrentGame.Css())
	}

	.gridCell {
		display:flex;
		justify-content:center;
		align-items:center;
		border: 1px solid silver
	}

	.endZone {
		background-color:deeppink;
	}

	.gridCell:hover {
		background-color:antiquewhite
	}

	.jewelCarrier {
		color:teal;
	}
</style>

<main>
	<div class="mainGrid">
		<GameGrid 
			Width="@CurrentGame.Width" Height="@CurrentGame.Height"
			GetCellCssClass="GetCellClass" GetCellContent="GetCellContent"
			MoveStarted="OnMoveStarted" MoveCompleted="OnMoveCompleted" />
	</div>	
</main>

<details>
	<summary>Info</summary>
	<div>Jewel carriers:</div>
	<ul>
		@foreach (var kp in CurrentGame.JewelCarriers)
		{
			<li>@kp.Key = @kp.Value</li>
		}
	</ul>
	<div>Current turn: @CurrentGame.CurrentSide</div>
</details>

@code {
	private JewelRunGameState CurrentGame = new();

	protected override void OnInitialized()
	{		
		CurrentGame.Initialize("Player1", "Player2");
	}

	private string GetCellClass(Location location)
	{
		if (location == JewelRunGameState.EastEndZone) return "gridCell endZone";
		if (location == JewelRunGameState.WestEndZone) return "gridCell endZone";
		return "gridCell";
	}

	private string GetCellContent(Location location)
	{
		if (CurrentGame.HasPiece(location, out var pieceInfo))
		{
			var carrierClass = CurrentGame.IsJewelCarrier(pieceInfo.SideName, pieceInfo.Piece) ? "jewelCarrier" : string.Empty;
			return $"<h1 class=\"{carrierClass}\" title=\"{pieceInfo.Piece.Name}\">{pieceInfo.Piece.Name[0]}</h1>";
		}

		return $"{location.Row}, {location.Column}";
	}

	private async Task OnMoveStarted(MoveArgs args)
	{
		await Task.CompletedTask;

		if (CurrentGame.HasPiece(args.SourceLocation, out var piece))
		{			
			args.IsValid = piece.SideName.Equals(CurrentGame.CurrentSide);
		}
	}

	private async Task OnMoveCompleted(MoveArgs args)
	{
		await Task.CompletedTask;

		// square must be empty to move to it
		if (CurrentGame.HasPiece(args.TargetLocation, out _)) return;

		if (CurrentGame.HasPiece(args.SourceLocation, out var pieceInfo))
		{
			args.IsValid = pieceInfo.Piece.AllowMove(args.SourceLocation, args.TargetLocation);
			if (args.IsValid)
			{
				CurrentGame.MovePiece(pieceInfo.Piece, pieceInfo.SideName, args.SourceLocation, args.TargetLocation);
			}
		}		
	}
}
